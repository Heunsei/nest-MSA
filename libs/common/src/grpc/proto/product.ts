// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.3
// source: proto/product.proto

/* eslint-disable */
import type { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "product";

/**
 * 파라미터가 존재하지 않는 경우 파라미터를 넣고, 그걸 없애서 로직을 처리
 * message는 비어있고 위에 CreateSamples 에 Request는 넣어야한다는 뜻
 */
export interface CreateSamplesRequest {
}

export interface CreateSamplesResponse {
  success: boolean;
}

/** 배열 전달 시 repeated 사용 */
export interface GetProductsInfoRequest {
  productIds: string[];
}

export interface GetProductsInfoResponse {
  /** 위에 정의된 ProductInfo를 반복 */
  products: GetProductsInfoResponse_ProductInfo[];
}

export interface GetProductsInfoResponse_ProductInfo {
  id: string;
  name: string;
  description: string;
  price: number;
  stock: number;
}

export const PRODUCT_PACKAGE_NAME = "product";

export interface ProductServiceClient {
  createSamples(request: CreateSamplesRequest, metadata?: Metadata): Observable<CreateSamplesResponse>;

  getProductsInfo(request: GetProductsInfoRequest, metadata?: Metadata): Observable<GetProductsInfoResponse>;
}

export interface ProductServiceController {
  createSamples(
    request: CreateSamplesRequest,
    metadata?: Metadata,
  ): Promise<CreateSamplesResponse> | Observable<CreateSamplesResponse> | CreateSamplesResponse;

  getProductsInfo(
    request: GetProductsInfoRequest,
    metadata?: Metadata,
  ): Promise<GetProductsInfoResponse> | Observable<GetProductsInfoResponse> | GetProductsInfoResponse;
}

export function ProductServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createSamples", "getProductsInfo"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ProductService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ProductService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const PRODUCT_SERVICE_NAME = "ProductService";
